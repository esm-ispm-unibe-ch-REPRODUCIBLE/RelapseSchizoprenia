View(dataset_dichotomous2)
dataset_dichotomous3=data.frame(
Final_ID_all=dataset_dichotomous2$Final_ID_all,
Study_name=dataset_dichotomous2$Study_name,
Drug_name=dataset_dichotomous2$Drug_name,
pooled_n=dataset_dichotomous2$pooled_n,
pooled_events=dataset_dichotomous2$pooled_events,
stringsAsFactors = FALSE)
NMAdatabinary=make.jagsNMA.data(studyid=Study_name,t=Drug_name,r=pooled_events,n=pooled_n,data=dataset_dichotomous3,type="binary",reference = "Placebo oral")
NMAinJAGS<- jags.parallel(data = NMAdatabinary, inits = NULL,
parameters.to.save = c("OR","ORref","tau", "d", "LORref"), n.chains = 2, n.iter = 10000,
n.burnin = 1000,DIC=F,n.thin=10,
model.file = modelNMABinary2)
#### function similar to modelNMABinary that also returns LORref ######
modelNMABinary2=function ()
{
for (i in 1:ns) {
w[i, 1] <- 0
theta[i, t[i, 1]] <- 0
for (k in 1:na[i]) {
r[i, t[i, k]] ~ dbin(p[i, t[i, k]], n[i, t[i, k]])
}
logit(p[i, t[i, 1]]) <- u[i]
for (k in 2:na[i]) {
logit(p[i, t[i, k]]) <- u[i] + theta[i, t[i, k]]
theta[i, t[i, k]] ~ dnorm(md[i, t[i, k]], precd[i,
t[i, k]])
md[i, t[i, k]] <- mean[i, k] + sw[i, k]
w[i, k] <- (theta[i, t[i, k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
precd[i, t[i, k]] <- prec * 2 * (k - 1)/k
mean[i, k] <- d[t[i, k]] - d[t[i, 1]]
}
}
for (i in 1:ns) {
u[i] ~ dnorm(0, 0.01)
}
tau ~ dnorm(0, 1) %_% T(0, )
prec <- 1/pow(tau, 2)
tau.sq <- pow(tau, 2)
d[ref] <- 0
for (k in 1:(ref - 1)) {
d[k] ~ dnorm(0, 0.01)
}
for (k in (ref + 1):nt) {
d[k] ~ dnorm(0, 0.01)
}
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
OR[j, i] <- exp(d[j] - d[i])
LOR[j, i] <- d[j] - d[i]
}
}
for (j in 1:(ref - 1)) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j]<-d[j]-d[ref]
}
for (j in (ref + 1):nt) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j]<-d[j]-d[ref]
}
}
NMAinJAGS<- jags.parallel(data = NMAdatabinary, inits = NULL,
parameters.to.save = c("OR","ORref","tau", "d", "LORref"), n.chains = 2, n.iter = 10000,
n.burnin = 1000,DIC=F,n.thin=10,
model.file = modelNMABinary2)
print(NMAinJAGS)
traceplot(NMAinJAGS,varname="tau" )
traceplot(NMAinJAGS,varname='LORref' )
#forestplot against placebo
LORref <- as.vector(NMAinJAGS$BUGSoutput$mean$LORref)
seLORref <- as.vector(NMAinJAGS$BUGSoutput$sd$LORref)
m1 <- metagen(LORref,seLORref,sm='OR')
forest(m1,overall = F)
View(data)
View(data)
knitr::opts_chunk$set(echo = TRUE)
#get the data and select them
DATA <- read_excel("C:/Users/kc19o338/Desktop/Analysis schizofrenia/dataset_relapse_2019_06_25.xlsx", na="99999")
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
DATA <- read_excel("C:/Users/kc19o338/Desktop/Analysis schizofrenia/dataset_relapse_2019_06_25.xlsx", na="99999")
View(DATA)
View(DATA)
#describe the data
tapply(DATA$Relapse_N_AnyTime,DATA$Drug_name,sum,na.rm=T)
print(length(table(DATA$Drug_name)))
print(length(table(DATA$Study_name)))
data= read_excel("C:/Users/kc19o338/Desktop/Analysis schizofrenia/dataset_relapse_2019_06_25.xlsx", na="99999")
##
####Placebo should be used as one node irrespective if oral or depot. Therefore we need to change "medication application" for placebo
#data<-mutate(data, Medicationapplication=ifelse(Drug_name=="Placebo", "oral or depot", Medicationapplication))
#### Oral and depot applications should be used as separate interventions. Therefore we need to add the type of medication application to drug_name
data$Drug_name<-paste(data$Drug_name,data$Medicationapplication)
#### We extracted the number of relapses from study start up to 3 months (=< 12 wks), from more than 3 months (>12 wks) up to 6 months (=<26 wks), from more than 6 months (>26 wks) up to 9 month (=< 39 wks), from more than 9 months (>39 wks) up to 12 months (<52 wks) and for more than 12 wks (>52 wks).We also enter data of the latest time point in each study in the outcome "N_Relapse_AnyTime".
#### As described in my specific questions, we may pool some of these intervals. One possibility is to use relapses from more than 6 months up to 12 month (>26 wks and =< 52 wks)
#### Therefore we need to use 9 month relapse data when 12 month data is not available
data<-mutate(data, Relapse_N_12m=ifelse(is.na(Relapse_N_12m), Relapse_N_9m, Relapse_N_12m))
#### Here we create new columns in the dataset which contain the information for the analysis of dichotomous data, i.e. we add columns at the end of the table.
####CAVE: HERE WE NEED TO ADAPT DEPENDING ON THE OUTCOME WE WANT TO ANALYSE
dataset_dichotomous1<-
data%>%
mutate(
IndivArm_n=data$N_arm_total_stapf,
IndivArm_events=data$Relapse_N_AnyTime
)
#### Some studies have several arms with the same drug but with different doses. We need to pool these arms, i.e. to calculate the sum of participants and sum of events
dataset_dichotomous2<-
select(dataset_dichotomous1, Final_ID_all, Study_name, Drug_name, IndivArm_n, IndivArm_events)%>%
drop_na%>%
group_by(Final_ID_all, Study_name, Drug_name)%>%
summarise(
pooled_n=sum(IndivArm_n, na.rm = FALSE),
pooled_events=sum(IndivArm_events, na.rm = FALSE)
)
##When we want additional columns in the dataset(e.g. for subgroup analysis), then we need to first type it into the select function and then either type it in the group_by function (when study-based information) or type it in the summarize function (when arm-based information, here probably most of the time as weighted mean)
####Continue with NMA
## Somehow "dataset_dichotomous2" cannot be used directly by pairwise function. We need to create a new dataframe first
dataset_dichotomous3=data.frame(
Final_ID_all=dataset_dichotomous2$Final_ID_all,
Study_name=dataset_dichotomous2$Study_name,
Drug_name=dataset_dichotomous2$Drug_name,
pooled_n=dataset_dichotomous2$pooled_n,
pooled_events=dataset_dichotomous2$pooled_events,
stringsAsFactors = FALSE)
## Bring longformat in pairwise
library(meta)
library(xlsx)
library(readxl)
library(netmeta)
library(tidyverse)
#library(swirl)
library(WriteXLS)
data= read_excel("C:/Users/kc19o338/Desktop/Analysis schizofrenia/dataset_relapse_2019_06_25.xlsx", na="99999")
##
####Placebo should be used as one node irrespective if oral or depot. Therefore we need to change "medication application" for placebo
#data<-mutate(data, Medicationapplication=ifelse(Drug_name=="Placebo", "oral or depot", Medicationapplication))
#### Oral and depot applications should be used as separate interventions. Therefore we need to add the type of medication application to drug_name
data$Drug_name<-paste(data$Drug_name,data$Medicationapplication)
#### We extracted the number of relapses from study start up to 3 months (=< 12 wks), from more than 3 months (>12 wks) up to 6 months (=<26 wks), from more than 6 months (>26 wks) up to 9 month (=< 39 wks), from more than 9 months (>39 wks) up to 12 months (<52 wks) and for more than 12 wks (>52 wks).We also enter data of the latest time point in each study in the outcome "N_Relapse_AnyTime".
#### As described in my specific questions, we may pool some of these intervals. One possibility is to use relapses from more than 6 months up to 12 month (>26 wks and =< 52 wks)
#### Therefore we need to use 9 month relapse data when 12 month data is not available
data<-mutate(data, Relapse_N_12m=ifelse(is.na(Relapse_N_12m), Relapse_N_9m, Relapse_N_12m))
#### Here we create new columns in the dataset which contain the information for the analysis of dichotomous data, i.e. we add columns at the end of the table.
####CAVE: HERE WE NEED TO ADAPT DEPENDING ON THE OUTCOME WE WANT TO ANALYSE
dataset_dichotomous1<-
data%>%
mutate(
IndivArm_n=data$N_arm_total_stapf,
IndivArm_events=data$Relapse_N_AnyTime
)
#### Some studies have several arms with the same drug but with different doses. We need to pool these arms, i.e. to calculate the sum of participants and sum of events
dataset_dichotomous2<-
select(dataset_dichotomous1, Final_ID_all, Study_name, Drug_name, IndivArm_n, IndivArm_events)%>%
drop_na%>%
group_by(Final_ID_all, Study_name, Drug_name)%>%
summarise(
pooled_n=sum(IndivArm_n, na.rm = FALSE),
pooled_events=sum(IndivArm_events, na.rm = FALSE)
)
##When we want additional columns in the dataset(e.g. for subgroup analysis), then we need to first type it into the select function and then either type it in the group_by function (when study-based information) or type it in the summarize function (when arm-based information, here probably most of the time as weighted mean)
####Continue with NMA
## Somehow "dataset_dichotomous2" cannot be used directly by pairwise function. We need to create a new dataframe first
dataset_dichotomous3=data.frame(
Final_ID_all=dataset_dichotomous2$Final_ID_all,
Study_name=dataset_dichotomous2$Study_name,
Drug_name=dataset_dichotomous2$Drug_name,
pooled_n=dataset_dichotomous2$pooled_n,
pooled_events=dataset_dichotomous2$pooled_events,
stringsAsFactors = FALSE)
write.csv(dataset_dichotomous3, file="Schizo.csv", row.names = F)
#get the data and select them
DATA <- read_excel("C:/Users/kc19o338/Desktop/Schizophrenia project/RelapseSchizoprenia/Schizo.csv.xlsx", na="99999")
#get the data and select them
DATA <- read_excel("C:/Users/kc19o338/Desktop/Schizophrenia project/RelapseSchizoprenia/Schizo.csv", na="99999")
#get the data and select them
DATA <- read_excel("C:/Users/kc19o338/Desktop/Schizophrenia project/RelapseSchizoprenia/Schizo.xlsx", na="99999")
#get the data and select them
DATA <- read_excel("C:/Users/kc19o338/Desktop/Schizophrenia project/RelapseSchizoprenia/Schizo.xls", na="99999")
#get the data and select them
DATA <- read_csv("C:/Users/kc19o338/Desktop/Schizophrenia project/RelapseSchizoprenia/Schizo.csv", na="99999")
View(DATA)
View(DATA)
View(dataset_dichotomous1)
View(dataset_dichotomous1)
data= read_excel("C:/Users/kc19o338/Desktop/Schizophrenia project/RelapseSchizoprenia/dataset_relapse.xlsx", na="99999")
View(data)
View(data)
#get the data and select them
DATA <- read_excel("C:/Users/kc19o338/Desktop/Schizophrenia project/RelapseSchizoprenia/dataset_relapse.xlsx", na="99999")
#describe the data
tapply(DATA$Relapse_N_AnyTime,DATA$Drug_name,sum,na.rm=T)
View(DATA)
View(DATA)
#describe the data
tapply(DATA$N_relapsed,DATA$Drug_name,sum,na.rm=T)
print(length(table(DATA$Drug_name)))
print(length(table(DATA$Study_name)))
#prepare the data
DATApairs=pairwise(treat=Drug_name,r=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#prepare the data
DATApairs=pairwise(treat=Drug_name,event=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#run NMA and create an object called EFF for efficacy
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DATApairs,  sm="SMD",r="Placebo",comb.fixed =F, comb.random = T, tol.multiarm=T)
#prepare the data
DATApairs=pairwise(treat=Drug_name,event=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#run NMA and create an object called EFF for efficacy
net1 <- netmeta(TE, seTE, treat1, treat2, studlab, data = TestPair, sm = "OR", comb.random=TRUE, comb.fixed=FALSE, prediction=TRUE,comb.random = T, tol.multiarm=T)
#prepare the data
DATApairs=pairwise(treat=Drug_name,event=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#run NMA and create an object called EFF for efficacy
net1 <- netmeta(TE, seTE, treat1, treat2, studlab, data = TestPair, sm = "OR", comb.random=TRUE, comb.fixed=FALSE, prediction=TRUE, tol.multiarm=T)
#prepare the data
DATApairs=pairwise(treat=Drug_name,event=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#run NMA and create an object called EFF for efficacy
net1 <- netmeta(TE, seTE, treat1, treat2, studlab, data = TestPair, sm = "OR", comb.random=TRUE, comb.fixed=FALSE, prediction=TRUE)
#prepare the data
DATApairs=pairwise(treat=Drug_name,event=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#run NMA and create an object called EFF for efficacy
net1 <- netmeta(TE, seTE, treat1, treat2, studlab, data = DATAPair, sm = "OR", comb.random=TRUE, comb.fixed=FALSE, prediction=TRUE)
#prepare the data
DATApairs=pairwise(treat=Drug_name,event=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#run NMA and create an object called EFF for efficacy
net1 <- netmeta(TE, seTE, treat1, treat2, studlab, data = DATAPairs, sm = "OR", comb.random=TRUE, comb.fixed=FALSE, prediction=TRUE)
#prepare the data
DATApairs=pairwise(treat=Drug_name,event=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#run NMA and create an object called EFF for efficacy
net1 <- netmeta(TE, seTE, treat1, treat2, studlab, data = DATApairs, sm = "OR", comb.random=TRUE, comb.fixed=FALSE, prediction=TRUE)
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DATApairs,  sm="OR",r="Placebo",comb.fixed =F, comb.random = T, tol.multiarm=T)
#prepare the data
DATApairs=pairwise(treat=Drug_name,event=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#run NMA and create an object called EFF for efficacy
net1 <- netmeta(TE, seTE, treat1, treat2, studlab, data = DATApairs, sm = "OR", comb.random=TRUE, comb.fixed=FALSE, prediction=TRUE)
net1
#network plot
netgraph(net1, plastic=F, thickness="number.of.studies", multiarm = F, points=T, cex.points=table(DATA$Drug_name)/16, col=1)
#network plot
netgraph(net1, plastic=F, thickness="number.of.studies", multiarm = F, points=T, cex.points=table(DATA$Drug_name)/33, col=1)
#network plot
netgraph(net1, plastic=F, thickness="number.of.studies", multiarm = F, points=T, cex.points=table(DATA$Drug_name), col=1)
#network plot
netgraph(net1, plastic=F, thickness="number.of.studies", multiarm = F, points=T, cex.points=table(DATA$Drug_name), col=1)
#network plot
netgraph(net1, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
#forest plots
forest(net1, ref="Placebo", sortvar = -Pscore,xlab="OR")
netrank(net1)
cat(paste("tau=",round(net1$tau,3)))
cat(paste("I2=",round(net1$I2),"%"))
split=netsplit(net1)
SIDEp=split$compare.random$p
SIDEp=SIDEp[!is.na(SIDEp)]
#proportion of inconsistent loops
cat(length(SIDEp))
cat(length(SIDEp[SIDEp<=0.1]))
cat(paste(round((length(SIDEp[SIDEp<=0.1])/length(SIDEp))*100,1),"%"))
a=decomp.design(net1)
print(round(a$Q.inc.random$pval,3))
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
DATA <- read_excel("C:/Users/kc19o338/Desktop/Schizophrenia project/RelapseSchizoprenia/dataset_relapse.xlsx", na="99999")
#describe the data
tapply(DATA$N_relapsed,DATA$Drug_name,sum,na.rm=T)
print(length(table(DATA$Drug_name)))
print(length(table(DATA$Study_name)))
#prepare the data
DATApairs=pairwise(treat=Drug_name,event=N_relapsed,n=N_randomized, data=DATA, studlab = Study_name, sm= "OR")
#run NMA and create an object called EFF for efficacy
net1 <- netmeta(TE, seTE, treat1, treat2, studlab, data = DATApairs, sm = "OR", comb.random=TRUE, comb.fixed=FALSE, prediction=TRUE)
netrank(net1)
cat(paste("tau=",round(net1$tau,3)))
cat(paste("I2=",round(net1$I2),"%"))
split=netsplit(net1)
SIDEp=split$compare.random$p
SIDEp=SIDEp[!is.na(SIDEp)]
#proportion of inconsistent loops
cat(length(SIDEp))
cat(length(SIDEp[SIDEp<=0.1]))
cat(paste(round((length(SIDEp[SIDEp<=0.1])/length(SIDEp))*100,1),"%"))
a=decomp.design(net1)
print(round(a$Q.inc.random$pval,3))
#get the data and select them
DATA <- read_excel("C:/Users/kc19o338/Desktop/Analysis schizofrenia/Datasets/dataset_relapse.xlsx", na="99999")
DATA<-read_excel("C:/Users/kc19o338/Desktop/Analysis schizofrenia/Datasets/dataset_relapse.xlsx", na="99999")
DATA= read_excel("C:/Users/kc19o338/Desktop/Analysis schizofrenia/Datasets/dataset_relapse.xlsx", na="99999")
NMRdataBinary=make.jagsNMA.data(studyid=Final_ID_all,t=Drug_name,r=N_relapsed,n=N_randomized,data=DATA,othervar = Duration_Actual - 26,type="binary",reference = "Placebo")
NMRdataBinary=make.jagsNMA.data(studyid=Final_ID_all,t=Drug_name,r=N_relapsed,n=N_randomized,data=DATA,othervar = Duration - 26,type="binary",reference = "Placebo")
source('NMRbinary.R')
#*********************************************************************************
#             Load the libraries needed
#*********************************************************************************
library(meta)
library(metafor)
library(netmeta)
library(readxl)
library(devtools)
library(NMAJags)
library(R2jags)
DATA= read_excel("C:/Users/kc19o338/Desktop/Analysis schizofrenia/Datasets/dataset_relapse.xlsx", na="99999")
NMRdataBinary=make.jagsNMA.data(studyid=Final_ID_all,t=Drug_name,r=N_relapsed,n=N_randomized,data=DATA,othervar = Duration - 26,type="binary",reference = "Placebo")
source('NMRbinary.R')
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL,
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMRBinary)
#### function similar to modelNMABinary that also returns LORref ######
modelNMABinary2=function ()
{
for (i in 1:ns) {
w[i, 1] <- 0
theta[i, t[i, 1]] <- 0
for (k in 1:na[i]) {
r[i, t[i, k]] ~ dbin(p[i, t[i, k]], n[i, t[i, k]])
}
logit(p[i, t[i, 1]]) <- u[i]
for (k in 2:na[i]) {
logit(p[i, t[i, k]]) <- u[i] + theta[i, t[i, k]]
theta[i, t[i, k]] ~ dnorm(md[i, t[i, k]], precd[i,
t[i, k]])
md[i, t[i, k]] <- mean[i, k] + sw[i, k]
w[i, k] <- (theta[i, t[i, k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
precd[i, t[i, k]] <- prec * 2 * (k - 1)/k
mean[i, k] <- d[t[i, k]] - d[t[i, 1]]
}
}
for (i in 1:ns) {
u[i] ~ dnorm(0, 0.01)
}
tau ~ dnorm(0, 1) %_% T(0, )
prec <- 1/pow(tau, 2)
tau.sq <- pow(tau, 2)
d[ref] <- 0
for (k in 1:(ref - 1)) {
d[k] ~ dnorm(0, 0.01)
}
for (k in (ref + 1):nt) {
d[k] ~ dnorm(0, 0.01)
}
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
OR[j, i] <- exp(d[j] - d[i])
LOR[j, i] <- d[j] - d[i]
}
}
for (j in 1:(ref - 1)) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j]<-d[j]-d[ref]
}
for (j in (ref + 1):nt) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j]<-d[j]-d[ref]
}
}
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL,
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMRBinary)
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL,
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMRBinary2)
#### function similar to modelNMABinary that also returns LORref ######
modelNMABinary2=function ()
{
for (i in 1:ns) {
w[i, 1] <- 0
theta[i, t[i, 1]] <- 0
for (k in 1:na[i]) {
r[i, t[i, k]] ~ dbin(p[i, t[i, k]], n[i, t[i, k]])
}
logit(p[i, t[i, 1]]) <- u[i]
for (k in 2:na[i]) {
logit(p[i, t[i, k]]) <- u[i] + theta[i, t[i, k]]
theta[i, t[i, k]] ~ dnorm(md[i, t[i, k]], precd[i,
t[i, k]])
md[i, t[i, k]] <- mean[i, k] + sw[i, k]
w[i, k] <- (theta[i, t[i, k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
precd[i, t[i, k]] <- prec * 2 * (k - 1)/k
mean[i, k] <- d[t[i, k]] - d[t[i, 1]]
}
}
for (i in 1:ns) {
u[i] ~ dnorm(0, 0.01)
}
tau ~ dnorm(0, 1) %_% T(0, )
prec <- 1/pow(tau, 2)
tau.sq <- pow(tau, 2)
d[ref] <- 0
for (k in 1:(ref - 1)) {
d[k] ~ dnorm(0, 0.01)
}
for (k in (ref + 1):nt) {
d[k] ~ dnorm(0, 0.01)
}
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
OR[j, i] <- exp(d[j] - d[i])
LOR[j, i] <- d[j] - d[i]
}
}
for (j in 1:(ref - 1)) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j]<-d[j]-d[ref]
}
for (j in (ref + 1):nt) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j]<-d[j]-d[ref]
}
}
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL,
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMABinary2)
modelNMRBinary=function(){
for(i in 1:ns) {
w[i,1]<- 0
theta[i,t[i,1]]<- 0
##binomial likelihood of number of events for each arm k of study i
for (k in 1:na[i]) {r[i,t[i,k]] ~ dbin(p[i, t[i, k]],n[i,t[i,k]])}
##parameterization of the 'true' effect of each comparison
##of arm k vs. baseline arm (1) of study i
logit(p[i,t[i,1]])<- u[i]
for (k in 2:na[i]) {
logit(p[i,t[i,k]])<- u[i] + theta1[i,t[i,k]]
theta1[i, t[i, k]]<- theta[i,t[i,k]]+beta[t[i,1],t[i,k]]*variab[i]
##distribution of random effects
theta[i,t[i,k]] ~ dnorm(md[i,t[i,k]],precd[i,t[i,k]])
## accounting for correlation between effect sizes estimated in multi-arm trials
md[i,t[i,k]]<- mean[i,k] + sw[i,k]
w[i,k]<- (theta[i,t[i,k]]  - mean[i,k])
sw[i,k]<- sum(w[i,1:(k-1)])/(k-1)
precd[i,t[i,k]]<- prec*2*(k-1)/k
##consistency equations
mean[i,k] <-d[t[i,k]] - d[t[i,1]]
}}
##prior distribution for log-odds in baseline arm of study i
for (i in 1:ns) {u[i] ~ dnorm(0,.01)}
##prior distribution for heterogeneity
tau ~ dnorm(0,1)%_%T(0,)
prec<- 1/pow(tau,2)
tau.sq<- pow(tau,2)
##prior distribution for basic parameters
d[ref] <- 0
for(k in 1:(ref-1)) {d[k] ~ dnorm(0,.01)}
for(k in (ref+1):nt) {d[k] ~ dnorm(0,.01)}
##OR for each comparison
for(i in 1:(nt-1)) {
for (j in (i+1):nt) {
OR[j,i]<- exp(d[j] - d[i])
LOR[j,i]<- d[j] - d[i]}
}
for(j in 1:(ref-1)){ORref[j]<- exp(d[j] - d[ref])}
for(j in (ref+1):nt) {ORref[j]<- exp(d[j] - d[ref])}
for(j in 1:(ref-1)){LORref[j]<- d[j] - d[ref]}
for(j in (ref+1):nt) {LORref[j]<- d[j] - d[ref]}
#Ranking of treatments#
#regression coefficients
for(i in 1:nt) {
for (j in 1:nt) {
beta[i,j]<-b[j]-b[i]
}
}
b[ref]<-0
for(k in 1:(ref-1)) {
b[k] ~ dnorm(0,0.0001)
}
for(k in (ref+1):nt) {
b[k] ~ dnorm(0,0.0001)
}
}
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL,
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMRBinary)
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL, ref="Placebo"
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMRBinary)
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL, ref="Placebo",
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMRBinary)
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL, reference="Placebo",
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMRBinary)
NMRdataBinary=make.jagsNMA.data(studyid=Final_ID_all,t=Drug_name,r=N_relapsed,n=N_randomized,data=DATA,othervar = Duration - 26,type="binary",reference = "Placebo oral or depot")
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL,
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMRBinary)
NMRdataBinary=make.jagsNMA.data(studyid=Final_ID_all,t=Drug_name,r=N_relapsed,n=N_randomized,data=DATA,othervar = Duration - 26,type="binary",reference = "Placebo oral or depot")
NMRinJAGSBinP <- jags.parallel(data = NMRdataBinary, inits = NULL,
parameters.to.save = c("ORref","tau",'b','LORref'), n.chains = 2, n.iter = 1000000,
n.burnin = 100000,DIC=F,n.thin=100,
model.file = modelNMRBinary)
